<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=, initial-scale=1.0">
    <title>Projects</title>
    <link rel="stylesheet" href="/static/education.css">
    <%- include('partials/head') %>
    <%- include('partials/navbar') %>

</head>
<body>
    <div class="container">
        <main class="row">
            <section class="col">
                <header class="title">
                    <h2>PROJECTS</h2>
                </header>
                <div class="contents"><div class="box">
                    <h4>Project: 1</h4>
                    <h3>The -Hangman</h3>
                    <p> <a href="https://github.com/Aiman-CIS/The-Hangman">https://github.com/Aiman-CIS/The-Hangman</a>
                        This Python code implements Hangman, a word-guessing game. It randomly selects a word from a list, allowing the player to guess one letter at a time. With six attempts, the player must correctly guess the word. The code tracks guessed letters, displays progress, and provides feedback. Enjoy the challenge!!
                        </p>
                </div>
            
                <div class="box">
                    <h4>Project: 2</h4>
                    <h3>Flask-Quotes-to-englighten</h3>
                    <p> <a href="https://github.com/Aiman-CIS/Flask-Quotes-to-englighten">https://github.com/Aiman-CIS/Flask-Quotes-to-englighten</a>
                        This repository contains the code for a simple blogging web application built with Flask, a popular Python web framework. The project was created as part of my learning journey to understand Flask and its features, such as routing, templates, forms, and databases.
                        
                        In this project, I implemented basic CRUD (Create, Read, Update, Delete) functionalities for blog posts, user authentication with password hashing, and pagination. The application uses a Mysql database to store data and SQLAlchemy as the ORM (Object-Relational Mapping) library to interact with the database.
                        </p>
                </div>
                <div class="box">
                    <h4>Project: 3</h4>
                    <h3> Crack-Detection-with-AlexNet</h3>
                    <p>
◦ Deep Learning CNN Model for Crack Detection Using AlexNet Architecture <br>

◦ This project involves building a deep learning CNN model for crack detection <br> using the AlexNet architecture in MATLAB. The dataset, organized by class in <br> subfolders, is used for training, testing, and evaluating the model. Key components include: <br>

◦ train.m: Constructs and trains the AlexNet-based model, saving it as net.mat. <br>
◦ test.m: Evaluates the trained model with images from the proc Testing folder, displaying predictions. <br>
◦ evaluate.m: Assesses model performance on additional test images from the proc Dataset folder, calculating classification accuracy. <br>

                        
                        
                       <a href=" https://github.com/Aiman-CIS/Crack-Detection-with-AlexNet
                       "> https://github.com/Aiman-CIS/Crack-Detection-with-AlexNet
                    </a>
                        </p>
                </div>
            </div>
            </section>




        </main>
    </div>
    
</body>
<footer>
    <p>&copy; 2023 Aiman Shaikh</p>
  </footer>

</html>
